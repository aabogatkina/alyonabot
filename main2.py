import os
from dotenv import load_dotenv
import telebot
import time
from datetime import datetime, timedelta

from telebot import types

from db import init_db, add_note, list_notes, update_note, delete_note, find_notes, list_models, get_active_model, \
    set_active_model
from openrouter_client import chat_once, OpenRouterError

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    raise RuntimeError("–í .env —Ñ–∞–π–ª–µ –Ω–µ—Ç TOKEN")

bot = telebot.TeleBot(TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
init_db()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
MAX_NOTES_PER_USER = 50


@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∑–∞–º–µ—Ç–æ–∫. –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")


@bot.message_handler(commands=['help'])
def help_cmd(message):
    help_text = f"""
–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/note_add <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É (–º–∞–∫—Å–∏–º—É–º {MAX_NOTES_PER_USER})
/note_list - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
/note_find <–∑–∞–ø—Ä–æ—Å> - –ù–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É
/note_edit <id> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç> - –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note_del <id> - –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É
/note_count - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ—Ç–æ–∫
/note_export - –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –≤ —Ñ–∞–π–ª
/note_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –Ω–µ–¥–µ–ª—é
/models - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
/model <id> - –í—ã–±—Ä–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –º–æ–¥–µ–ª—å
/ask <–≤–æ–ø—Ä–æ—Å> - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò

üìù –õ–∏–º–∏—Ç: {MAX_NOTES_PER_USER} –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
"""
    bot.reply_to(message, help_text)


@bot.message_handler(commands=['note_add'])
def note_add(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫
    user_id = message.from_user.id
    user_notes = list_notes(user_id)

    if len(user_notes) >= MAX_NOTES_PER_USER:
        bot.reply_to(
            message,
            f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–º–µ—Ç–æ–∫! –ú–∞–∫—Å–∏–º—É–º {MAX_NOTES_PER_USER} –∑–∞–º–µ—Ç–æ–∫ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n"
            f"–£ –≤–∞—Å —É–∂–µ {len(user_notes)} –∑–∞–º–µ—Ç–æ–∫. –£–¥–∞–ª–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞–º–µ—Ç–∫–∏ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ."
        )
        return

    text = message.text.replace('/note_add', '').strip()
    if not text:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.")
        return

    note_id = add_note(user_id, text)
    bot.reply_to(
        message,
        f"‚úÖ –ó–∞–º–µ—Ç–∫–∞ #{note_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞: {text}\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(user_notes) + 1}/{MAX_NOTES_PER_USER} –∑–∞–º–µ—Ç–æ–∫"
    )


@bot.message_handler(commands=['note_list'])
def note_list(message):
    user_id = message.from_user.id
    user_notes = list_notes(user_id)

    if not user_notes:
        bot.reply_to(message, "–ó–∞–º–µ—Ç–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = f"üìù –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ ({len(user_notes)}/{MAX_NOTES_PER_USER}):\n" + "\n".join(
        [f"{note['id']}: {note['text']}" for note in user_notes])
    bot.reply_to(message, response)


@bot.message_handler(commands=['note_find'])
def note_find(message):
    query = message.text.replace('/note_find', '').strip()
    if not query:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
        return

    user_id = message.from_user.id
    found_notes = find_notes(user_id, query)

    if not found_notes:
        bot.reply_to(message, "–ó–∞–º–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    response = f"üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏ ({len(found_notes)}):\n" + "\n".join(
        [f"{note['id']}: {note['text']}" for note in found_notes])
    bot.reply_to(message, response)


@bot.message_handler(commands=['note_edit'])
def note_edit(message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /note_edit <id> <–Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç>")
        return

    try:
        note_id = int(parts[1])
        new_text = parts[2]
    except ValueError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    user_id = message.from_user.id
    success = update_note(user_id, note_id, new_text)

    if not success:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: –ó–∞–º–µ—Ç–∫–∞ #{note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë –∏–∑–º–µ–Ω–µ–Ω–∏—è.")
        return

    user_notes = list_notes(user_id)
    bot.reply_to(
        message,
        f"‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞ #{note_id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {new_text}\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(user_notes)}/{MAX_NOTES_PER_USER} –∑–∞–º–µ—Ç–æ–∫"
    )


@bot.message_handler(commands=['note_del'])
def note_del(message):
    parts = message.text.split()
    if len(parts) < 2:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    try:
        note_id = int(parts[1])
    except ValueError:
        bot.reply_to(message, "–û—à–∏–±–∫–∞: ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    user_id = message.from_user.id
    success = delete_note(user_id, note_id)

    if not success:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: –ó–∞–º–µ—Ç–∫–∞ #{note_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –µ—ë —É–¥–∞–ª–µ–Ω–∏—è.")
        return

    user_notes = list_notes(user_id)
    bot.reply_to(
        message,
        f"üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ #{note_id} —É–¥–∞–ª–µ–Ω–∞.\n"
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {len(user_notes)}/{MAX_NOTES_PER_USER} –∑–∞–º–µ—Ç–æ–∫"
    )


@bot.message_handler(commands=['note_count'])
def note_count(message):
    user_id = message.from_user.id
    user_notes = list_notes(user_id)
    count = len(user_notes)

    if count >= MAX_NOTES_PER_USER:
        status = "‚ùå –õ–∏–º–∏—Ç –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!"
    elif count >= MAX_NOTES_PER_USER * 0.8:  # 80% –æ—Ç –ª–∏–º–∏—Ç–∞
        status = "‚ö†Ô∏è –õ–∏–º–∏—Ç –ø–æ—á—Ç–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç!"
    else:
        status = "‚úÖ –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ"

    bot.reply_to(
        message,
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–º–µ—Ç–æ–∫:\n"
        f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {count}\n"
        f"‚Ä¢ –õ–∏–º–∏—Ç: {MAX_NOTES_PER_USER}\n"
        f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {MAX_NOTES_PER_USER - count}\n"
        f"{status}"
    )


@bot.message_handler(commands=['note_export'])
def note_export(message):
    user_id = message.from_user.id
    user_notes = list_notes(user_id)

    if not user_notes:
        bot.reply_to(message, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ —Å timestamp –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    timestamp = int(time.time())
    filename = f"notes_{user_id}_{timestamp}.txt"

    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
        file_content = f"–í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ (—ç–∫—Å–ø–æ—Ä—Ç –æ—Ç {time.strftime('%Y-%m-%d %H:%M:%S')})\n"
        file_content += f"–í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {len(user_notes)}/{MAX_NOTES_PER_USER}\n"
        file_content += "=" * 50 + "\n\n"

        for note in user_notes:
            file_content += f"–ó–∞–º–µ—Ç–∫–∞ #{note['id']}:\n"
            file_content += f"{note['text']}\n"
            file_content += "-" * 30 + "\n"

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Ñ–∞–π–ª
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(file_content)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with open(filename, 'rb') as f:
            bot.send_document(
                message.chat.id,
                f,
                caption=f"üìÅ –í–∞—à–∏ –∑–∞–º–µ—Ç–∫–∏ ({len(user_notes)}/{MAX_NOTES_PER_USER} —à—Ç.)",
                visible_file_name="your_notes.txt"
            )

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.remove(filename)

    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –∑–∞–º–µ—Ç–æ–∫: {str(e)}")
        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if os.path.exists(filename):
            try:
                os.remove(filename)
            except:
                pass


@bot.message_handler(commands=['note_stats'])
def note_stats(message):
    user_id = message.from_user.id
    user_notes = list_notes(user_id)

    if not user_notes:
        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–æ–∫ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤ –±–∞–∑–µ –µ—Å—Ç—å –ø–æ–ª–µ created_at)
    # –ï—Å–ª–∏ –≤ –≤–∞—à–µ–π –±–∞–∑–µ –Ω–µ—Ç created_at, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç –∫–æ–¥
    dates = []
    for note in user_notes:
        # –ï—Å–ª–∏ –≤ note –µ—Å—Ç—å created_at, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        if 'created_at' in note:
            dates.append(note['created_at'])
        else:
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
            days_ago = len(dates) % 7
            dates.append(datetime.now() - timedelta(days=days_ago))

    # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
    week_activity = [0] * 7  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ

    for date in dates:
        if isinstance(date, str):
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ datetime
            try:
                date_obj = datetime.fromisoformat(date.replace('Z', '+00:00'))
            except:
                date_obj = datetime.now()
        else:
            date_obj = date

        weekday = date_obj.weekday()  # 0 = –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 = –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        week_activity[weekday] += 1

    # –°–æ–∑–¥–∞–µ–º ASCII –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
    max_activity = max(week_activity) if week_activity else 1
    chart_height = 10

    # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
    days_ru = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

    # –°—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
    chart_lines = []

    # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã (—Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑)
    for level in range(chart_height, 0, -1):
        line = ""
        for day_activity in week_activity:
            bar_height = (day_activity / max_activity) * chart_height if max_activity > 0 else 0
            if bar_height >= level:
                line += " ‚ñà‚ñà "
            else:
                line += "    "
        chart_lines.append(line)

    # –ü–æ–¥–ø–∏—Å–∏ –¥–Ω–µ–π –∏ –∑–Ω–∞—á–µ–Ω–∏—è
    days_line = ""
    values_line = ""
    for i, day in enumerate(days_ru):
        days_line += f" {day} "
        values_line += f" {week_activity[i]:2d}"

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    stats_text = "üìä –í–∞—à–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–∞ –Ω–µ–¥–µ–ª—é:\n\n"

    # –î–æ–±–∞–≤–ª—è–µ–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
    for line in chart_lines:
        stats_text += line + "\n"

    stats_text += days_line + "\n"
    stats_text += values_line + "\n\n"

    # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_notes = len(user_notes)
    avg_per_day = total_notes / 7
    most_active_day = days_ru[week_activity.index(max(week_activity))] if week_activity else "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

    stats_text += f"üìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
    stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–º–µ—Ç–æ–∫: {total_notes}\n"
    stats_text += f"‚Ä¢ –í —Å—Ä–µ–¥–Ω–µ–º –≤ –¥–µ–Ω—å: {avg_per_day:.1f}\n"
    stats_text += f"‚Ä¢ –°–∞–º—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å: {most_active_day}\n"
    stats_text += f"‚Ä¢ –õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è: {total_notes}/{MAX_NOTES_PER_USER} ({total_notes / MAX_NOTES_PER_USER * 100:.1f}%)\n\n"

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if max(week_activity) == 0:
        stats_text += "üí° –°–æ–≤–µ—Ç: –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–µ–µ!"
    elif max(week_activity) >= 5:
        stats_text += "üî• –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    else:
        stats_text += "üí™ –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞! –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ –∑–∞–º–µ—Ç–æ–∫."

    bot.reply_to(message, stats_text)


@bot.message_handler(commands=["models"])
def cmd_models(message: types.Message) -> None:
    items = list_models()
    if not items:
        bot.reply_to(message, "–°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –ø—É—Å—Ç")
        return
    lines = ["–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:"]
    for m in items:
        star = "*" if m["active"] else " "
        lines.append(f"{star} {m['id']}. {m['label']} [{m['key']}]")
    lines.append("\n–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å: /model <ID>")
    bot.reply_to(message, "\n".join(lines))


@bot.message_handler(commands=["model"])
def cmd_model(message: types.Message) -> None:
    arg = message.text.replace("/model", "", 1).strip()
    if not arg:
        active = get_active_model()
        bot.reply_to(message, f"–¢–µ–∫—É—â–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å: {active['label']} [{active['key']}]\n(—Å–º–µ–Ω–∏—Ç—å: /model <ID> –∏–ª–∏ /models)")
        return
    if not arg.isdigit():
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /model <ID –∏–∑ /models>")
        return
    try:
        active = set_active_model(int(arg))
        bot.reply_to(message, f"–ê–∫—Ç–∏–≤–Ω–∞—è –º–æ–¥–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∞: {active['label']} [{active['key']}]")
    except ValueError:
        bot.reply_to(message, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID –º–æ–¥–µ–ª–∏. –°–Ω–∞—á–∞–ª–∞ /models")


def _build_messages(user_id: int, user_text: str) -> list[dict]:
    system = (
        f"–¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Å—É—â–µ—Å—Ç–≤—É.\n"
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "1) –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –¥–∞–≤–∞–π –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏ –ø–æ –ø—É–Ω–∫—Ç–∞–º.\n"
    )
    return [
        {"role": "system", "content": system},
        {"role": "user", "content": user_text},
    ]


@bot.message_handler(commands=["ask"])
def cmd_ask(message: types.Message) -> None:
    q = message.text.replace("/ask", "", 1).strip()
    if not q:
        bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /ask <–≤–æ–ø—Ä–æ—Å>")
        return

    msgs = _build_messages(message.from_user.id, q[:600])
    model_key = get_active_model()["key"]

    try:
        text, ms = chat_once(msgs, model=model_key, temperature=0.2, max_tokens=400)
        out = (text or "").strip()[:4000]          # –Ω–µ –ø–µ—Ä–µ–ø–æ–ª–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram
        bot.reply_to(message, f"{out}\n\n({ms} –º—Å; –º–æ–¥–µ–ª—å: {model_key})")
    except OpenRouterError as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞: {e}")
    except Exception:
        bot.reply_to(message, "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")


if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    bot.infinity_polling()